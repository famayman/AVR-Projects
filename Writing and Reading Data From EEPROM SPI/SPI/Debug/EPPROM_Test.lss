
EPPROM_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000002ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8e  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b2  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051f  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000563  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022f  00000000  00000000  0000245b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  74:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_CS_Control>:
#define READ_OPCODE		(0x03)
#define DUMMY_DATA		(0x00)

static void SPI_CS_Control (unsigned char state)
{
	switch(state)
  7c:	88 23       	and	r24, r24
  7e:	19 f0       	breq	.+6      	; 0x86 <SPI_CS_Control+0xa>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	29 f0       	breq	.+10     	; 0x8e <SPI_CS_Control+0x12>
  84:	08 95       	ret
	{
		case 0:
		CHIP_SELECT_PORT &= ~(1<<CHIP_SELECT_PIN);
  86:	88 b3       	in	r24, 0x18	; 24
  88:	8f 7e       	andi	r24, 0xEF	; 239
  8a:	88 bb       	out	0x18, r24	; 24
		break;
  8c:	08 95       	ret
		case 1:
		CHIP_SELECT_PORT |= (1<<CHIP_SELECT_PIN);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	80 61       	ori	r24, 0x10	; 16
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <EEPROM_Init>:
	}	
}

void EEPROM_Init(void)
{
	SPI_USED.Status = SPI_Enable;
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
	SPI_USED.SPI_Select = SPI_Master_Select;
  9c:	11 82       	std	Z+1, r1	; 0x01
	SPI_USED.SPI_Clock = SPI_Clock_Mode3;
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	82 83       	std	Z+2, r24	; 0x02
	SPI_USED.Data_Order = SPI_MSB;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	83 83       	std	Z+3, r24	; 0x03
	SPI_USED.Freq = SPI_FCPU_BY_8;
  a6:	92 e0       	ldi	r25, 0x02	; 2
  a8:	94 83       	std	Z+4, r25	; 0x04
	SPI_USED.Interrupt_State = SPI_Interrupt_Disable;
  aa:	85 83       	std	Z+5, r24	; 0x05
	CHIP_SELECT_DDR |= (1<<CHIP_SELECT_PIN);
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	87 bb       	out	0x17, r24	; 23
	CHIP_SELECT_PORT |= (1<<CHIP_SELECT_PIN);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	88 bb       	out	0x18, r24	; 24
	SPI_Init();
  b8:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Init>
  bc:	08 95       	ret

000000be <EEPROM_Write_Byte>:
}

void EEPROM_Write_Byte(unsigned char data, unsigned char address)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	c8 2f       	mov	r28, r24
  c4:	d6 2f       	mov	r29, r22
	
	SPI_CS_Control(0);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_CS_Control>
	SPI_ReadWrite_Blocking(WREN_OPCODE);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_ReadWrite_Blocking>
	SPI_CS_Control(1);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_CS_Control>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <EEPROM_Write_Byte+0x1e>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <EEPROM_Write_Byte+0x24>
  e2:	00 00       	nop
	_delay_ms(50);
	SPI_CS_Control(0);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_CS_Control>
	SPI_ReadWrite_Blocking(WRTIE_OPCODE);
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_ReadWrite_Blocking>
	SPI_ReadWrite_Blocking(address);
  f0:	8d 2f       	mov	r24, r29
  f2:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_ReadWrite_Blocking>
	SPI_ReadWrite_Blocking(data);
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_ReadWrite_Blocking>
	SPI_CS_Control(1);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_CS_Control>
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <EEPROM_Write_Byte+0x48>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <EEPROM_Write_Byte+0x4e>
 10c:	00 00       	nop
	_delay_ms(50);
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <EEPROM_Read_Byte>:

unsigned char EEPROM_Read_Byte(unsigned short address)
{
 114:	cf 93       	push	r28
 116:	c8 2f       	mov	r28, r24
	
	unsigned char ReadData = 0;
	SPI_CS_Control(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_CS_Control>
	SPI_ReadWrite_Blocking(READ_OPCODE);
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_ReadWrite_Blocking>
	SPI_ReadWrite_Blocking(address);
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_ReadWrite_Blocking>
	ReadData = SPI_ReadWrite_Blocking(DUMMY_DATA);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_ReadWrite_Blocking>
 130:	c8 2f       	mov	r28, r24
	SPI_CS_Control(1);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_CS_Control>
 138:	83 ed       	ldi	r24, 0xD3	; 211
 13a:	90 e3       	ldi	r25, 0x30	; 48
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <EEPROM_Read_Byte+0x28>
 140:	00 c0       	rjmp	.+0      	; 0x142 <EEPROM_Read_Byte+0x2e>
 142:	00 00       	nop
	_delay_ms(50);
	return ReadData;
 144:	8c 2f       	mov	r24, r28
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <main>:
#include <avr/io.h>
#include "avr/delay.h"
#define F_CPU   1000000UL
int main(void)
{
   EEPROM_Init();
 14a:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_Init>
   EEPROM_Write_Byte(0x55,0x00);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	85 e5       	ldi	r24, 0x55	; 85
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_Write_Byte>
   EEPROM_Write_Byte(0xAA,0x01);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	8a ea       	ldi	r24, 0xAA	; 170
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_Write_Byte>
   EEPROM_Write_Byte(0xEE,0x02);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8e ee       	ldi	r24, 0xEE	; 238
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_Write_Byte>
   EEPROM_Read_Byte(0x02); //Use SPI DEBUGGER To see the read data
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 8a 00 	call	0x114	; 0x114 <EEPROM_Read_Byte>
}
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret

00000180 <SPI_Init>:
#include "SPI.h"
SPI_ConfigStruct    SPI0={0};

void SPI_Init()
{
	SPCR = 0;
 180:	1d b8       	out	0x0d, r1	; 13
	SPSR = 0;
 182:	1e b8       	out	0x0e, r1	; 14
	switch(SPI0.Status)
 184:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	81 11       	cpse	r24, r1
 18a:	68 c0       	rjmp	.+208    	; 0x25c <SPI_Init+0xdc>
	{
	case SPI_Disable:
	break;
	case SPI_Enable:
	  switch (SPI0.SPI_Select)
 18c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 190:	88 23       	and	r24, r24
 192:	19 f0       	breq	.+6      	; 0x19a <SPI_Init+0x1a>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	41 f0       	breq	.+16     	; 0x1a8 <SPI_Init+0x28>
 198:	0a c0       	rjmp	.+20     	; 0x1ae <SPI_Init+0x2e>
	  {
		  case SPI_Master_Select:
		  SPCR |= (1<<MSTR);DDRB |= (1<<7)|(1<<5)|(1<<4);
 19a:	8d b1       	in	r24, 0x0d	; 13
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	8d b9       	out	0x0d, r24	; 13
 1a0:	87 b3       	in	r24, 0x17	; 23
 1a2:	80 6b       	ori	r24, 0xB0	; 176
 1a4:	87 bb       	out	0x17, r24	; 23
		  break;
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <SPI_Init+0x2e>
		  case SPI_Slave_Select:DDRB |= (1<<6);
 1a8:	87 b3       	in	r24, 0x17	; 23
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	87 bb       	out	0x17, r24	; 23
		  break;
	  }
	 switch (SPI0.Data_Order)
 1ae:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1b2:	81 11       	cpse	r24, r1
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <SPI_Init+0x3c>
	 {
		 case SPI_LSB:SPCR |=(1<<DORD);break;
 1b6:	8d b1       	in	r24, 0x0d	; 13
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	8d b9       	out	0x0d, r24	; 13
		 case SPI_MSB:break; 
	 }
	 switch (SPI0.Interrupt_State)
 1bc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1c0:	81 11       	cpse	r24, r1
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <SPI_Init+0x4a>
	 {
		 case SPI_Interrupt_Enable: SPCR |=(1<<SPIE);
 1c4:	8d b1       	in	r24, 0x0d	; 13
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	8d b9       	out	0x0d, r24	; 13
		 break;
		 case SPI_Interrupt_Disable:
		 break;
	 }
	 switch (SPI0.SPI_Clock)
 1ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <SPI_Init+0x62>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	69 f0       	breq	.+26     	; 0x1f0 <SPI_Init+0x70>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	89 f4       	brne	.+34     	; 0x1fc <SPI_Init+0x7c>
	 {
		 case SPI_Clock_Mode0:	
		 break;
		 case SPI_Clock_Mode1: SPCR |=(1<<CPHA);
 1da:	8d b1       	in	r24, 0x0d	; 13
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	8d b9       	out	0x0d, r24	; 13
		 break;
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <SPI_Init+0x7c>
		 case SPI_Clock_Mode2: SPCR |=(1<<CPOL);PORTB |=(1<<PB7);
 1e2:	8d b1       	in	r24, 0x0d	; 13
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	8d b9       	out	0x0d, r24	; 13
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	88 bb       	out	0x18, r24	; 24
		 break;
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <SPI_Init+0x7c>
		 case SPI_Clock_Mode3: SPCR |=(1<<CPOL)|(CPHA);PORTB |=(1<<PB7);
 1f0:	8d b1       	in	r24, 0x0d	; 13
 1f2:	8a 60       	ori	r24, 0x0A	; 10
 1f4:	8d b9       	out	0x0d, r24	; 13
 1f6:	88 b3       	in	r24, 0x18	; 24
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	88 bb       	out	0x18, r24	; 24
		 break;
	 }
	switch(SPI0.Freq)
 1fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	b9 f0       	breq	.+46     	; 0x232 <SPI_Init+0xb2>
 204:	28 f4       	brcc	.+10     	; 0x210 <SPI_Init+0x90>
 206:	88 23       	and	r24, r24
 208:	49 f0       	breq	.+18     	; 0x21c <SPI_Init+0x9c>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	59 f0       	breq	.+22     	; 0x224 <SPI_Init+0xa4>
 20e:	23 c0       	rjmp	.+70     	; 0x256 <SPI_Init+0xd6>
 210:	85 30       	cpi	r24, 0x05	; 5
 212:	b9 f0       	breq	.+46     	; 0x242 <SPI_Init+0xc2>
 214:	90 f0       	brcs	.+36     	; 0x23a <SPI_Init+0xba>
 216:	86 30       	cpi	r24, 0x06	; 6
 218:	d9 f0       	breq	.+54     	; 0x250 <SPI_Init+0xd0>
 21a:	1d c0       	rjmp	.+58     	; 0x256 <SPI_Init+0xd6>
	{
	   case SPI_FCPU_BY_2:SPSR |=(1<<SPI2X);
 21c:	8e b1       	in	r24, 0x0e	; 14
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	8e b9       	out	0x0e, r24	; 14
	   break;
 222:	19 c0       	rjmp	.+50     	; 0x256 <SPI_Init+0xd6>
	   case SPI_FCPU_BY_4:
	   break;
	   case SPI_FCPU_BY_8: SPCR |=(1<<SPR0); SPSR |=(1<<SPI2X);
 224:	8d b1       	in	r24, 0x0d	; 13
 226:	81 60       	ori	r24, 0x01	; 1
 228:	8d b9       	out	0x0d, r24	; 13
 22a:	8e b1       	in	r24, 0x0e	; 14
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	8e b9       	out	0x0e, r24	; 14
	   break;
 230:	12 c0       	rjmp	.+36     	; 0x256 <SPI_Init+0xd6>
	   case SPI_FCPU_BY_16: SPCR |=(1<<SPR0);
 232:	8d b1       	in	r24, 0x0d	; 13
 234:	81 60       	ori	r24, 0x01	; 1
 236:	8d b9       	out	0x0d, r24	; 13
	   break;
 238:	0e c0       	rjmp	.+28     	; 0x256 <SPI_Init+0xd6>
	   case SPI_FCPU_BY_32: SPCR |=(1<<SPR1)|(1<<SPI2X);
 23a:	8d b1       	in	r24, 0x0d	; 13
 23c:	83 60       	ori	r24, 0x03	; 3
 23e:	8d b9       	out	0x0d, r24	; 13
	   break;
 240:	0a c0       	rjmp	.+20     	; 0x256 <SPI_Init+0xd6>
	   case SPI_FCPU_BY_64: SPCR |=(1<<SPR0)|(1<<SPR1); SPSR|=(1<<SPI2X);
 242:	8d b1       	in	r24, 0x0d	; 13
 244:	83 60       	ori	r24, 0x03	; 3
 246:	8d b9       	out	0x0d, r24	; 13
 248:	8e b1       	in	r24, 0x0e	; 14
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	8e b9       	out	0x0e, r24	; 14
	   break;
 24e:	03 c0       	rjmp	.+6      	; 0x256 <SPI_Init+0xd6>
	   case SPI_FCPU_BY_128: SPCR |=(1<<SPR0)|(1<<SPR1);
 250:	8d b1       	in	r24, 0x0d	; 13
 252:	83 60       	ori	r24, 0x03	; 3
 254:	8d b9       	out	0x0d, r24	; 13
	   break;	
	}
	SPCR |=(1<<SPE);
 256:	8d b1       	in	r24, 0x0d	; 13
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	8d b9       	out	0x0d, r24	; 13
 25c:	08 95       	ret

0000025e <SPI_ReadWrite_Blocking>:
	break;
	}
}
unsigned char SPI_ReadWrite_Blocking(unsigned char Data)
{
	SPDR =Data;
 25e:	8f b9       	out	0x0f, r24	; 15
	if( (SPSR & (1<<WCOL)) !=0)
 260:	76 9b       	sbis	0x0e, 6	; 14
 262:	03 c0       	rjmp	.+6      	; 0x26a <SPI_ReadWrite_Blocking+0xc>
	{
		SPI0.errors = SPI_write_Collsion;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
	}
	while(!(SPSR & (1<<SPIF)));
 26a:	77 9b       	sbis	0x0e, 7	; 14
 26c:	fe cf       	rjmp	.-4      	; 0x26a <SPI_ReadWrite_Blocking+0xc>
	return SPDR;
 26e:	8f b1       	in	r24, 0x0f	; 15
}
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
